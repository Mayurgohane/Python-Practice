# -*- coding: utf-8 -*-
"""Python 100 Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYRqPNIJaUsI-9VFXKMnN9NPA2uDhHTB

User will input (3ages).Find the oldest one
"""

ages = [25, 34, 29]

oldest_age = max(ages)

print(f"The oldest age is {oldest_age}")

"""Write a program that will convert celsius value to fahrenheit"""

def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

"""User will input (2numbers).Write a program to swap the numbers"""

# Taking input from the user
num1 = input("Enter the first number: ")
num2 = input("Enter the second number: ")

# Swapping the numbers
num1, num2 = num2, num1

# Printing the swapped numbers

print("First number:", num1)
print("Second number:", num2)

"""Write a program that will give you the sum of 3 digits

"""

# Input three digits from the user
num1 = int(input("Enter the first digit: "))
num2 = int(input("Enter the second digit: "))
num3 = int(input("Enter the third digit: "))

# Calculate the sum of the three digits
total_sum = num1 + num2 + num3

# Display the sum
print(total_sum)

"""Write a program that will reverse a four digit number.Also it checks
whether the reverse is true.
"""

def reverse_and_check():
    # Input a four-digit number from the user
    num = int(input("Enter a four-digit number: "))

    # Reverse the number
    reversed_num = int(str(num)[::-1])

    # Check if the reversed number is equal to the original number
    if reversed_num == num:
        print(f"{num} is a palindrome.")
    else:
        print(f"{num} is not a palindrome.")

# Call the function to execute
reverse_and_check()

"""Write a program that will tell whether the number entered by the
user is odd or even.
"""

def check_odd_or_even():
    # Input a number from the user
    num = int(input("Enter a number: "))

    # Check if the number is odd or even
    if num % 2 == 0:
        print(f"{num} is even.")
    else:
        print(f"{num} is odd.")

# Call the function to execute
check_odd_or_even()

"""Write a program that will tell whether the given year is a leap year
or not.
"""

def check_leap_year():
    # Input a year from the user
    year = int(input("Enter a year: "))

    # Check if the year is a leap year
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                print(f"{year} is a leap year.")
            else:
                print(f"{year} is not a leap year.")
        else:
            print(f"{year} is a leap year.")
    else:
        print(f"{year} is not a leap year.")

# Call the function to execute
check_leap_year()

"""Write a program to find the euclidean distance between two
coordinates
"""

def calculate_distance():
    try:
        # Input coordinates from the user
        x1 = float(input("Enter x1 coordinate: "))
        y1 = float(input("Enter y1 coordinate: "))
        x2 = float(input("Enter x2 coordinate: "))
        y2 = float(input("Enter y2 coordinate: "))

        # Calculate Euclidean distance
        distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5

        # Print the distance
        print(f"The Euclidean distance between ({x1}, {y1}) and ({x2}, {y2}) is: {distance:.2f}")

    except ValueError:
        print("Please enter valid numerical coordinates.")

# Call the function to execute
calculate_distance()

"""Write a program that take a user inputr of three angles and will
find out whether it can form a triangle or not.
"""

def check_triangle_angles():
    try:
        # Input three angles from the user
        angle1 = float(input("Enter the first angle in degrees: "))
        angle2 = float(input("Enter the second angle in degrees: "))
        angle3 = float(input("Enter the third angle in degrees: "))

        # Check if the angles can form a triangle
        if angle1 + angle2 + angle3 == 180:
            print("These angles can form a triangle.")
        else:
            print("These angles cannot form a triangle.")

    except ValueError:
        print("Please enter valid numerical angles.")

# Call the function to execute
check_triangle_angles()

"""Write a program that will take user input of cost price and selling
price and determines whether its a loss or a profit
"""

def calculate_profit_or_loss():
    try:
        # Input cost price and selling price from the user
        cost_price = float(input("Enter the cost price: "))
        selling_price = float(input("Enter the selling price: "))

        # Calculate profit or loss
        difference = selling_price - cost_price

        # Determine and print result
        if difference > 0:
            print(f"Profit: {difference:.2f}")
        elif difference < 0:
            print(f"Loss: {-difference:.2f}")
        else:
            print("No profit, no loss.")

    except ValueError:
        print("Please enter valid numerical values for cost price and selling price.")

# Call the function to execute
calculate_profit_or_loss()

"""Write a program to find the simple interest when the value of
principle,rate of interest and time period is given.
"""

def calculate_simple_interest():
    try:
        # Input principal amount, rate of interest, and time period from the user
        principal = float(input("Enter the principal amount: "))
        rate = float(input("Enter the annual interest rate (%): "))
        time = float(input("Enter the time period (in years): "))

        # Calculate simple interest
        simple_interest = (principal * rate * time) / 100

        # Print the calculated simple interest
        print(f"The Simple Interest is: {simple_interest:.2f}")

    except ValueError:
        print("Please enter valid num")

# Call the function to execute
calculate_simple_interest()

"""Write a program to find the volume of the cylinder. Also find the
cost when ,when the cost of 1litre milk is 40Rs.
"""

def main():
    try:
        # Input radius and height of the cylinder from the user
        radius = float(input("Enter the radius of the cylinder (in cm): "))
        height = float(input("Enter the height of the cylinder (in cm): "))

        # Calculate the volume of the cylinder in liters
        volume_liters = 3.14 * radius * radius * height / 1000

        # Calculate the cost of milk assuming Rs 40 per liter
        cost_of_milk = volume_liters * 40

        # Print the results
        print(f"Volume: {volume_liters:.2f} liters")
        print(f"Cost of milk: Rs {cost_of_milk:.2f}")

    except ValueError:
        print("Please enter valid numerical values for radius and height.")

# Call the main function to execute
main()

"""Write a program that will tell whether the given number is divisible
by 3 & 6.
"""

def main():
    try:
        # Input number from the user
        num = int(input("Enter a number to check divisibility by 3 & 6: "))

        # Check divisibility
        if num % 3 == 0 and num % 6 == 0:
            print(f"{num} is divisible by both 3 and 6.")
        else:
            print(f"{num} is not divisible by both 3 and 6.")

    except ValueError:
        print("Please enter a valid integer.")

# Call the main function to execute
main()

"""Write a program that will determine weather when the value of
temperature and humidity is provided by the user.
TEMPERATURE(C) HUMIDITY(%) WEATHER
"""

def determine_weather(temperature, humidity):
    if temperature > 30 and humidity > 70:
        return "Hot and Humid"
    elif temperature > 20 and humidity > 50:
        return "Warm"
    elif temperature <= 20 and humidity <= 50:
        return "Cool"
    else:
        return "Weather conditions not defined"

def main():
    try:
        # Input temperature and humidity from the user
        temperature = float(input("Enter the temperature in Celsius: "))
        humidity = float(input("Enter the humidity percentage: "))

        # Determine the weather based on temperature and humidity
        weather = determine_weather(temperature, humidity)

        # Print the weather condition
        print(f"For {temperature}Â°C and {humidity}% humidity, the weather is {weather}.")

    except ValueError:
        print("Please enter valid numerical values for temperature and humidity.")

# Call the main function to execute
main()

"""Write a program that will take three digits from the user and add
the square of each digit.

"""

def sum_of_squares_of_digits(num):
    # Calculate the sum of squares of each digit
    digit1 = (num // 100) ** 2   # Extract and square the hundreds place digit
    digit2 = ((num % 100) // 10) ** 2  # Extract and square the tens place digit
    digit3 = (num % 10) ** 2     # Extract and square the units place digit

    # Return the sum of squares
    return digit1 + digit2 + digit3

def main():
    try:
        # Input a three-digit number from the user
        num = int(input("Enter a three-digit number: "))

        # Check if the number is a valid three-digit number
        if 100 <= num <= 999:
            # Calculate sum of squares of digits
            result = sum_of_squares_of_digits(num)
            print(f"Sum of squares of digits for {num}: {result}")
        else:
            print("Please enter a valid three-digit number.")

    except ValueError:
        print("Please enter a valid integer.")

# Call the main function to execute the program
main()

"""Write a program that will take user input of (4 digits number) and
check whether the number is narcissist number or not
"""

def main():
    try:
        # Input a 4-digit number from the user
        num = int(input("Enter a 4-digit number to check if it's a narcissistic number: "))

        # Check if the number is a 4-digit number
        if 1000 <= num <= 9999:
            # Calculate each digit separately
            digit1 = num // 1000
            digit2 = (num // 100) % 10
            digit3 = (num // 10) % 10
            digit4 = num % 10

            # Calculate sum of each digit raised to the power of 4
            sum_of_powers = digit1**4 + digit2**4 + digit3**4 + digit4**4

            # Check if the number is narcissistic
            if sum_of_powers == num:
                print(f"{num} is a narcissistic number.")
            else:
                print(f"{num} is not a narcissistic number.")
        else:
            print("Please enter a valid 4-digit number.")

    except ValueError:
        print("Please enter a valid integer.")

# Call the main function to execute the program
main()

"""Write a program that will give you the in hand salary after
deduction of HRA(10%),DA(5%),PF(3%), and tax(if salary is between
5-10 lakhâ10%),(11-20lakhâ20%),(20< _ â 30%)(0-1lakh print k).
"""

def calculate_in_hand_salary(salary):
    # Constants for percentages
    hra_percentage = 10
    da_percentage = 5
    pf_percentage = 3

    # Calculate deductions
    hra = (hra_percentage / 100) * salary
    da = (da_percentage / 100) * salary
    pf = (pf_percentage / 100) * salary

    # Calculate taxable income after deductions
    taxable_income = salary - hra - da - pf

    # Calculate tax based on salary range
    if 0 <= taxable_income <= 100000:
        tax = 0
    elif 100001 <= taxable_income <= 500000:
        tax = 0.1 * taxable_income
    elif 500001 <= taxable_income <= 1000000:
        tax = 0.2 * taxable_income
    else:
        tax = 0.3 * taxable_income

    # Calculate in-hand salary
    in_hand_salary = salary - hra - da - pf - tax

    return in_hand_salary

def main():
    try:
        salary = float(input("Enter your salary: "))

        # Check if salary is valid (greater than zero)
        if salary < 0:
            print("Please enter a valid salary greater than zero.")
            return

        # Calculate in-hand salary
        in_hand_salary = calculate_in_hand_salary(salary)

        # Print the in-hand salary
        print(f"In-hand salary after deductions: {in_hand_salary:.2f}")

    except ValueError:
        print("Please enter a valid numerical salary.")

# Call the main function to execute the program
main()

"""Write a menu driven program - 1.cm to ft 2.kl to miles 3.usd to inr
4.exit
"""

def cm_to_ft(cm):
    return cm / 30.48

def km_to_miles(km):
    return km * 0.621371

def usd_to_inr(usd):
    return usd * 75

def main():
    while True:
        print("\nMenu:")
        print("1. Convert Centimeters to Feet")
        print("2. Convert Kilometers to Miles")
        print("3. Convert USD to INR")
        print("4. Exit")

        try:
            choice = int(input("Enter your choice (1/2/3/4): "))

            if choice == 1:
                cm = float(input("Enter length in centimeters: "))
                ft = cm_to_ft(cm)
                print(f"{cm} cm is equal to {ft:.2f} feet.")
            elif choice == 2:
                km = float(input("Enter distance in kilometers: "))
                miles = km_to_miles(km)
                print(f"{km} km is equal to {miles:.2f} miles.")
            elif choice == 3:
                usd = float(input("Enter amount in USD: "))
                inr = usd_to_inr(usd)
                print(f"{usd} USD is equal to {inr:.2f} INR.")
            elif choice == 4:
                print("Exiting the program. Goodbye!")
                break
            else:
                print("Invalid choice. Please enter a valid option (1/2/3/4).")

        except ValueError:
            print("Invalid input. Please enter a number.")

# Call the main function to execute the program
main()

"""Write a program that will tell the number of dogs and chicken are
there when the user will provide the value
"""

def count_animals(total_legs):
    chickens = total_legs // 2
    dogs = (total_legs - 2 * chickens) // 4
    return dogs, chickens

def main():
    try:
        total_legs = int(input("Enter total number of legs: "))

        if total_legs < 0 or total_legs % 2 != 0:
            print("Invalid input. Please enter a non-negative even number of legs.")
            return

        dogs, chickens = count_animals(total_legs)

        print(f"Number of dogs: {dogs}")
        print(f"Number of chickens: {chickens}")

    except ValueError:
        print("Invalid input. Please enter a valid integer.")

# Call the main function to execute the program
main()

"""Write a program that will swap numbers"""

def swap_numbers(a, b):
    print(f"Before swapping: a = {a}, b = {b}")
    # Swapping without using a temporary variable
    a, b = b, a
    print(f"After swapping: a = {a}, b = {b}")

def main():
    try:
        a = float(input("Enter the first number (a): "))
        b = float(input("Enter the second number (b): "))

        swap_numbers(a, b)

    except ValueError:
        print("Invalid input. Please enter valid numerical values.")

# Call the main function to execute the program
main()

"""Write a program to find the sum of first n numbers, where n will be
provided by the user. Eg if the user provides n=10 the output should be
55
"""

def sum_of_first_n_numbers(n):
    # Calculate the sum of the first n natural numbers
    sum_n = (n * (n + 1)) // 2
    return sum_n

def main():
    try:
        n = int(input("Enter a positive integer (n): "))

        if n <= 0:
            print("Please enter a positive integer greater than zero.")
            return

        result = sum_of_first_n_numbers(n)
        print(f"The sum of the first {n} numbers is: {result}")

    except ValueError:
        print("Invalid input. Please enter a valid integer.")

# Call the main function to execute the program
main()

"""Write a program that can multiply 2 numbers provided by the user
without using the * operator
"""

def multiply_without_operator(a, b):
    # Initialize the result variable
    result = 0

    # Add 'a' to 'result' 'b' times
    for _ in range(b):
        result += a

    return result

def main():
    try:
        # Prompt user for input
        a = int(input("Enter the first number: "))
        b = int(input("Enter the second number: "))

        # Calculate the product using the function
        product = multiply_without_operator(a, b)

        # Display the result
        print(f"The product of {a} and {b} is: {product}")

    except ValueError:
        print("Invalid input. Please enter valid integers.")

# Execute the main function
main()

"""Write a program that can find the factorial of a given number provided
by the user.
"""

def factorial(n):
    # Base case: factorial of 0 or 1 is 1
    if n == 0 or n == 1:
        return 1
    else:
        # Recursive case: n! = n * (n-1)!
        return n * factorial(n - 1)

def main():
    try:
        # Prompt user for input
        num = int(input("Enter a non-negative integer to find its factorial: "))

        if num < 0:
            print("Factorial is not defined for negative numbers.")
        else:
            # Calculate factorial using the function
            result = factorial(num)
            print(f"The factorial of {num} is: {result}")

    except ValueError:
        print("Invalid input. Please enter a valid integer.")

# Execute the main function
main()

"""Write a program to print the first 25 odd numbers

"""

def print_first_25_odd_numbers():
    # Initialize the first odd number
    num = 1
    # Print the first 25 odd numbers
    for _ in range(25):
        print(num, end=" ")
        num += 2  # Move to the next odd number

# Call the function to print the first 25 odd numbers
print_first_25_odd_numbers()

"""Write a program to print whether a given number is prime number or
not
"""

def is_prime(number):
    if number <= 1:
        return False
    if number <= 3:
        return True
    if number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i += 6
    return True

def main():
    try:
        num = int(input("Enter a number to check if it's prime: "))
        if is_prime(num):
            print(f"{num} is a prime number.")
        else:
            print(f"{num} is not a prime number.")
    except ValueError:
        print("Invalid input. Please enter a valid integer.")

main()

"""Print all the armstrong numbers in the range of 100 to 1000"""

def is_armstrong_number(number):
    # Calculate the number of digits in the number
    num_str = str(number)
    num_digits = len(num_str)

    # Calculate the sum of each digit raised to the power of the number of digits
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)

    # Check if the number is equal to the sum of its digits raised to the power of the number of digits
    return number == sum_of_powers

# Print all Armstrong numbers between 100 and 1000
print("Armstrong numbers between 100 and 1000 are:")
for num in range(100, 1001):
    if is_armstrong_number(num):
        print(num)

"""The current population of a town is 10000. The population of the town is
increasing at the rate of 10% per year. You have to write a program to
find out the population at the end of each of the last 10 years. For eg
current population is 10000 so the output should be like this:
"""

def main():
    current_population = 10000
    growth_rate = 0.10  # 10% annual growth rate

    for year in range(1, 11):
        population = int(current_population * (1 + growth_rate) ** year)
        print(f"Population at the end of year {year}: {population}")

# Execute the main function
main()

"""Write a program to print all the unique combinations of 1,2,3 and 4"""

from itertools import combinations

# Define the numbers
numbers = [1, 2, 3, 4]

for r in range(1, len(numbers) + 1):
    for combo in combinations(numbers, r):
        print(combo)

"""User will provide 2 numbers you have to find the HCF of those 2
numbers
"""

def find_hcf(num1, num2):
    while num2 != 0:
        num1, num2 = num2, num1 % num2
    return num1

def main():
    try:
        num1 = int(input("Enter the first number: "))
        num2 = int(input("Enter the second number: "))

        hcf = find_hcf(num1, num2)

        print(f"The HCF of {num1} and {num2} is: {hcf}")

    except ValueError:
        print("Please enter valid integers.")

# Execute the main function
main()

"""User will provide 2 numbers you have to find the by LCM of those 2
numbers
"""

def gcd(num1, num2):
    while num2 != 0:
        num1, num2 = num2, num1 % num2
    return num1

def lcm(num1, num2):
    return (num1 * num2) // gcd(num1, num2)

def main():
    try:
        num1 = int(input("Enter the first number: "))
        num2 = int(input("Enter the second number: "))

        result_lcm = lcm(num1, num2)

        print(f"The LCM of {num1} and {num2} is: {result_lcm}")

    except ValueError:
        print("Please enter valid integers.")

# Execute the main function
main()

"""Print first 25 prime numbers"""

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

# Print the first 25 prime numbers
count = 0
number = 2

print("First 25 prime numbers:")
while count < 25:
    if is_prime(number):
        print(number, end=" ")
        count += 1
    number += 1

print()  # Print a newline for better formatting

"""Print the first 20 numbers of a Fibonacci series"""

# Initialize the first two numbers of the Fibonacci sequence
a, b = 0, 1

for _ in range(20):
    print(a, end=" ")
    a, b = b, a + b  # Update a and b to the next Fibonacci numbers

print()  # Print a newline for better formatting

"""Write a program to find the compound interest"""

def calculate_compound_interest(principal, rate, time):
    """ Function to calculate compound interest """
    amount = principal * (1 + rate/100)**time
    compound_interest = amount - principal
    return compound_interest

# Example usage
principal = 10000  # Initial principal amount
rate = 5           # Annual interest rate (in percentage)
time = 3           # Time period (in years)

# Calculate compound interest
interest = calculate_compound_interest(principal, rate, time)

# Print the compound interest
print(f"Compound Interest after {time} years: Rs {interest:.2f}")

"""Write a Python program that accepts an integer (n) and computes the
value of n+nn+nnn
"""

# Accept an integer input from the user
n = int(input("Enter an integer (n): "))

# Compute nn and nnn
nn = int(str(n) + str(n))      # Example: if n = 5, nn = 55
nnn = int(str(n) + str(n) + str(n))  # Example: if n = 5, nnn = 555

# Compute the expression
result = n + nn + nnn

# Print the result
print(f"Result of {n} + {nn} + {nnn} = {result}")

"""Take a number from the user and find the number of digits in it"""

# Accept an integer input from the user
number = input("Enter a number: ")

# Calculate the number of digits
num_digits = len(number)

# Print the number of digits
print(f"Number of digits in {number}: {num_digits}")

"""Print all factors of a given number provided by the user."""

number = int(input("Enter a number: "))

factors = []

# Iterate through all numbers from 1 to the entered number
for i in range(1, number + 1):
    if number % i == 0:
        factors.append(i)  # Add i to factors if it divides the number evenly

for factor in factors:
    print(factor)

"""Find the reverse of a number provided by the user(any number of digit)"""

# Accept an integer input from the user
number = input("Enter a number: ")

# Reverse the number using slicing
reversed_number = number[::-1]

# Print the reversed number
print(f"Reversed number: {reversed_number}")

"""Write a program to print the following pattern

*
**
***
****
*****
"""

# Define the number of rows for the pattern
num_rows = 5

# Loop through each row
for i in range(1, num_rows + 1):
    # Print '*' multiplied by the current row number
    print('*' * i)

"""Write a program to print the following pattern
*
**
***
**
*

"""

# Upper part of the pattern
for i in range(1, 4):
    print('*' * i)

# Lower part of the pattern
for i in range(3, 0, -1):
    print('*' * i)

"""Write a program to print the following pattern
*
* * *
* * * * *
* * * * * * *
* * * * * * * * *

"""

# Define the number of rows for the pattern
num_rows = 5

# Loop through each row
for i in range(1, num_rows + 1):
    # Print '*' repeated i times
    print('* ' * i)

"""Write a program to print the following pattern
1
1 2 1
1 2 3 2 1
1 2 3 4 3 2 1
1 2 3 4 5 4 3 2 1
"""

# Define the number of rows for the pattern
num_rows = 5

for i in range(1, num_rows + 1):
    # Print numbers in ascending order
    for j in range(1, i + 1):
        print(j, end=" ")

    # Print numbers in descending order
    for j in range(i - 1, 0, -1):
        print(j, end=" ")

    print()

"""Write a program to print the following pattern
1
2 3
4 5 6
7 8 9 10
"""

# Define the number of rows for the pattern
num_rows = 4
current_number = 1

for i in range(1, num_rows + 1):
    # Print numbers in each row
    for j in range(i):
        print(current_number, end=" ")
        current_number += 1

    # Move to the next line after each row
    print()

"""Write a program to calculate the sum of the following series till the
nth term
1/1! + 2/2! + 3/3! + 4/4! +â¦â¦.+ n/n!
n will be provided by the user
"""

def calculate_series_sum(n):
    series_sum = 0
    factorial = 1

    for i in range(1, n + 1):
        factorial *= i  # Compute factorial incrementally
        series_sum += i / factorial

    return series_sum

# Get input from user for n
n = int(input("Enter the value of n: "))

# Calculate and print the sum of the series
result = calculate_series_sum(n)
print(f"The sum of the series up to {n} terms is: {result}")

