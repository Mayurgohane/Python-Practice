# -*- coding: utf-8 -*-
"""Numpy Practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zBRz1gHjf5O-Fe2fESDFiFrJ2ft4IxCG
"""

import numpy as np

#Mean
arr = [1 ,2, 5, 8, 9, 15]
np.mean(arr)

#Median
arr = [1 ,2, 5, 8, 9, 15]
np.median(arr)

#Square_Root
arr = [1 ,2, 5, 8, 9, 15]
np.sqrt(arr)

#Reshape_Array
arr = [1 ,2, 5, 8, 9, 15]
np.reshape(arr, (2,3))

#Converting 1D array to 2D array
arr = [1 ,2, 5, 8, 9, 15]
np.reshape(arr, (2,3))

#Concanate
arr_1 = [4 , 8, 9, 10, 15]
arr_2 = [1 ,2, 5, 8, 9]
np.concatenate((arr_1, arr_2))

#Vertical_Stacking
arr_1 = [4 , 8, 9, 10, 15]
arr_2 = [1 ,2, 5, 8, 9]
np.vstack((arr_1, arr_2))

#Horizontal stacking
arr_1 = [4 , 8, 9, 10, 15]
arr_2 = [1 ,2, 5, 8, 9]
np.hstack((arr_1, arr_2))

#Split array
arr = np.array([4, 8, 9, 10, 15, 17])
np.split(arr, 2)

#Sorting array in Asc order
arr = [1 ,2, 5, 8, 9, 15]
np.sort(arr)

#Sorting array in Desc order
arr = [1 ,2, 5, 8, 9, 15]
np.sort(arr)[::-1]

#Missing values
arr = ([1 ,2, 5, np.nan, 8, np.nan, 9, 15])
np.isnan(arr)

#Data centering
arr =([1, 8, 77, 88, 99, 15, 44])

mean = np.mean(arr)

centered_arr = arr - mean

print(centered_arr)

#Stadardization
sdt = np.std(arr)

standardized_arr = centered_arr / sdt

print(standardized_arr)

#Log transformation
arr = ([1 ,2, 5, 8, 9, 15])
np.log(arr)

#Simple random sampling
arr = ([1 ,2, 5, 8, 9, 15])
np.random.choice(arr, 3)

#Boostrap sampling

arr = ([1 ,2, 5, 8, 9, 15])
num_samples= 2
np.random.choice(arr, num_samples, replace=True)

#Random Array generation

array = np.random.randint(0, 110)
print(array)

#Calculate inverse of A
A = ([1, 2],[3, 4])
np.linalg.inv(A)

#Compute single value decomption -svd
np.linalg.svd(A)

#Solve linear equations with array
A = ([1, 2],[3, 4])
b = ([5, 6])
np.linalg.solve(A, b)